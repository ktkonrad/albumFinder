#!/usr/bin/env python2.6

"""
AlbumFinder v0.1

AlbumFinder is a bare-bones web app to create YouTube playlists for albums
Album info in fetched from Wikipedia

TODO: make track name parsing from wikipedia more robust.
      beter yet, get track names from amazon instead
"""

import amazon as amzn
import youtube as yt

import urllib, urlparse, re, web
import ConfigParser

config = ConfigParser.ConfigParser()
config.read('albumFinder.cfg')
youtube = yt.Youtube(config.get('youtube', 'developer_key'))

amazon = amzn.Amazon(config.get('amazon', 'aws_key'), config.get('amazon', 'secret_key'))

urls = ['/playlist', 'Playlist']

app = web.application(urls, globals())

class Playlist():
    def GET(self):
        """get one-time token from youtube, exchange for session token"""
        params = urlparse.parse_qs(web.ctx.query[1:])
        if 'token' in params.keys(): # we have a one time token
            one_time_token = params['token'][0]
            youtube.upgrade_token(one_time_token)
            if 'artist' not in params.keys():
                return "please enter an artist"
            if 'album' not in params.keys():
                return "please enter an album"
            artist = params['artist'][0]
            album = params['album'][0]
            title = "%s %s" % (artist, album)
            summary = "%s by %s. Playlist generated by AlbumFinder" % (album, artist)
            try:
                playlist_id = youtube.add_playlist(title, summary)
            except gdata.service.RequestError as e:
                if re.search('Playlist already exists', str(e)):
                    return 'playlist already exists'
                else:
                    raise e
            for video_id in get_album_videos(artist, album):
                youtube.add_video_to_playlist(video_id, playlist_id)
            web.seeother(youtube.playlist_base + playlist_id)
        else: # get a one-time token
            params = urllib.urlencode({'next' : '%s%s' % (web.ctx.homedomain, web.ctx.fullpath), 'scope' : 'http://gdata.youtube.com', 'session' : '1', 'secure' : '0'})
            web.seeother("%s?%s" % (youtube.authsubrequest_url, params))

    POST = GET


def get_album_videos(artist, album):
    """helper function to get track names from amazon and corresponding videos from youtube"""
    tracks = amazon.get_tracks(album, artist)
    for track in tracks:
        video_id = youtube.query("%s %s" % (artist, track))
        if video_id:
            yield video_id


if __name__ == '__main__':
    app.run()


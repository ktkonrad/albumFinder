#!/usr/bin/env python2.6

"""
AlbumFinder v0.2.1

AlbumFinder is a bare-bones web app to create YouTube playlists for albums
Album info in fetched from Wikipedia

TODO: make track name parsing from wikipedia more robust.
      beter yet, get track names from amazon instead
"""

version = '0.2.1'

import amazon as amzn
import youtube as yt

import urllib, urlparse, re, web
import ConfigParser

config = ConfigParser.ConfigParser()
config.read('albumFinder.cfg')
youtube = yt.Youtube(config.get('youtube', 'developer_key'))

amazon = amzn.Amazon(config.get('amazon', 'aws_key'), config.get('amazon', 'secret_key'))

urls = ['/', 'Index',
        '/playlist', 'Playlist'
]

app = web.application(urls, globals())
render = web.template.render('templates/')

class Playlist():
    def GET(self):
        """get one-time token from youtube, exchange for session token"""
        params = urlparse.parse_qs(web.ctx.query[1:])
        if 'token' not in params.keys():
            return 'No youtube session token given'
        one_time_token = params['token'][0]
        youtube.upgrade_token(one_time_token)
        if 'artist' not in params.keys():
            return "please enter an artist"
        if 'album' not in params.keys():
            return "please enter an album"
        artist = params['artist'][0]
        album = params['album'][0]
        title = "%s %s" % (artist, album)
        summary = "%s by %s. Playlist generated by AlbumFinder" % (album, artist)
        try:
            playlist_id = youtube.add_playlist(title, summary)
        except Exception as e:
            if re.search('Playlist already exists', str(e)):
                return 'playlist already exists'
            else:
                raise e
        for video_id in get_album_videos(artist, album):
            youtube.add_video_to_playlist(video_id, playlist_id)
        web.seeother(youtube.playlist_base + playlist_id)
    POST = GET


album_artist_form = web.form.Form(
    web.form.Textbox('album', web.form.notnull),
    web.form.Textbox('artist', web.form.notnull))
        
class Index():
    def GET(self):
        form = album_artist_form()
        return render.form(form)

    def POST(self):
        form = album_artist_form()
        if not form.validates():
            return render.form(form)
        else:
            playlist_params = urllib.urlencode({'album' : form.album.value, 'artist' : form.artist.value})
            params = urllib.urlencode({'next' : '%s/playlist?%s' % (web.ctx.homedomain, playlist_params), 'scope' : 'http://gdata.youtube.com', 'session' : '1', 'secure' : '0'})
            web.seeother("%s?%s" % (youtube.authsubrequest_url, params))


def get_album_videos(artist, album):
    """helper function to get track names from amazon and corresponding videos from youtube"""
    tracks = amazon.get_tracks(album, artist)
    for track in tracks:
        video_id = youtube.query("%s %s" % (artist, track))
        if video_id:
            yield video_id


if __name__ == '__main__':
    app.run()

